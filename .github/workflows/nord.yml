name: Rumble Visit with VPN in Container

on:
  push:
  schedule:
    - cron: '*/59 * * * *'
  workflow_dispatch:
    inputs:
      video_url:
        description: 'Rumble Video URL'
        required: true
        default: 'https://rumble.com/v6r0vz6-automate.html'

jobs:
  rumble-vpn:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      options: --privileged --security-opt seccomp=unconfined --security-opt apparmor=unconfined
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Essential Dependencies
        run: |
          apt update
          apt install -y curl wget sudo iproute2 apt-transport-https gnupg ca-certificates
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          apt install -y nodejs
          apt install -y fonts-liberation libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcups2 libdbus-1-3 libgbm1 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxrandr2 libxshmfence1 libxss1 libasound2t64 libpulse0 libxkbcommon0 xdg-utils lsb-release libasound2-plugins

      - name: Install and Connect NordVPN
        env:
          NORDVPN_TOKEN: ${{ secrets.NORDVPN_TOKEN }}
        run: |
          echo "deb https://repo.nordvpn.com/deb/nordvpn/debian stable main" | sudo tee /etc/apt/sources.list.d/nordvpn.list
          wget -q -O /tmp/nordvpn_public.asc https://repo.nordvpn.com/gpg/nordvpn_public.asc || curl -fsSL https://repo.nordvpn.com/gpg/nordvpn_public.asc -o /tmp/nordvpn_public.asc
          sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/nordvpn.gpg /tmp/nordvpn_public.asc
          sudo apt update
          sudo apt install -y nordvpn
          sudo /etc/init.d/nordvpn start || exit 1
          sleep 5
          sudo nordvpn login --token "$NORDVPN_TOKEN"
          sudo nordvpn set technology nordlynx
          until sudo nordvpn connect; do
            echo "NordVPN connection failed. Retrying in 10 seconds..."
            sleep 10
          done
          sleep 10

      - name: Install Puppeteer Dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth

      - name: Create Puppeteer Script for Rumble
        run: |
          mkdir -p scripts screenshots
          cat > scripts/rumble-visit.js << 'EOF'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          const { execSync } = require('child_process');

          puppeteer.use(StealthPlugin());

          function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
          }

          async function safeScreenshot(page, path) {
              try {
                  await page.screenshot({ path });
                  console.log(`Screenshot taken: ${path}`);
              } catch (err) {
                  console.error(`Failed to take screenshot ${path}: ${err.message}`);
              }
          }

          async function reconnectVPN() {
              console.log("Reconnecting to a different VPN server...");
              try {
                  execSync("sudo nordvpn disconnect", { stdio: 'inherit' });
                  await sleep(10000);
                  execSync("sudo nordvpn connect", { stdio: 'inherit' });
                  await sleep(10000);
                  const newIP = execSync("curl -s https://api64.ipify.org").toString().trim();
                  console.log("New VPN IP:", newIP);
                  return true;
              } catch (error) {
                  console.error("Failed to reconnect VPN:", error.message);
                  return reconnectVPN();
              }
          }

          async function visitRumble(videoUrl) {
              let browser = await puppeteer.launch({
                  headless: "new",
                  ignoreHTTPSErrors: true,
                  executablePath: require('puppeteer').executablePath(),
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
              });

              let page = await browser.newPage();
              await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/133.0.0.0 Safari/537.36');
              await page.setCacheEnabled(false);

              console.log("Navigating to Rumble video...");
              await page.goto(videoUrl, { waitUntil: 'networkidle2', timeout: 120000 });
              await sleep(3000);
              await safeScreenshot(page, `./screenshots/rumble_landing_${Date.now()}.png`);

              const playButtonSelectors = [
                  '.bigPlayUIInner.ctp',
                  'button[aria-label="Play"]',
                  '.vjs-big-play-button',
                  '.icon-play',
                  'div[class*=play]'
              ];

              let playButton = null;
              for (const selector of playButtonSelectors) {
                  playButton = await page.$(selector);
                  if (playButton) {
                      console.log(`Play button found using selector: ${selector}`);
                      await playButton.click();
                      await sleep(3000);
                      await safeScreenshot(page, `./screenshots/rumble_play_clicked_${Date.now()}.png`);
                      break;
                  }
              }

              if (!playButton) {
                  console.warn("Play button not found. Proceeding without clicking.");
              }

              for (let t = 5; t <= 30; t += 5) {
                  await sleep(5000);
                  await safeScreenshot(page, `./screenshots/rumble_watch_${t}s_${Date.now()}.png`);
                  const isPlaying = await page.evaluate(() => {
                      const video = document.querySelector("video");
                      return video && !video.paused && !video.ended && video.readyState > 2;
                  });

                  if (!isPlaying) {
                      console.log("Video is not playing. Attempting VPN reconnect...");
                      await browser.close();
                      const reconnected = await reconnectVPN();
                      if (reconnected) {
                          return await visitRumble(videoUrl);
                      } else {
                          throw new Error("VPN reconnect failed. Aborting.");
                      }
                  }
              }

              const finalHtml = await page.content();
              const htmlFile = `./screenshots/final_rumble_page_${Date.now()}.html`;
              fs.writeFileSync(htmlFile, finalHtml);
              console.log(`Final HTML page saved: ${htmlFile}`);
              await browser.close();
          }

          async function run() {
              const videoUrl = process.argv[2] || "https://rumble.com/v6r0vz6-automate.html";
              await visitRumble(videoUrl);
          }

          run().catch(error => {
              console.error("Script failed:", error.message);
          });
          EOF

      - name: Run Puppeteer Script
        run: |
          VIDEO_URL="${{ github.event.inputs.video_url || 'https://rumble.com/v6r0vz6-automate.html' }}"
          echo "Visiting: $VIDEO_URL"
          node scripts/rumble-visit.js "$VIDEO_URL" | tee rumble_script_output.log

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rumble-debug-artifact-${{ runner.os }}
          path: |
            screenshots/
            *.log
            *.html
          retention-days: 7
